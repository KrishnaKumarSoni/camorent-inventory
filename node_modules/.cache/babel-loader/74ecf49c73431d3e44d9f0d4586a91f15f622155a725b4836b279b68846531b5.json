{"ast":null,"code":"// API utility functions with error handling and fallbacks\n\nclass ApiError extends Error {\n  constructor(message, status) {\n    super(message);\n    this.status = status;\n    this.name = 'ApiError';\n  }\n}\n\n// Generic API call function with error handling\nasync function apiCall(url, options) {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...(options === null || options === void 0 ? void 0 : options.headers)\n      },\n      ...options\n    });\n    if (!response.ok) {\n      throw new ApiError(`HTTP ${response.status}: ${response.statusText}`, response.status);\n    }\n    const data = await response.json();\n    if (data.error) {\n      throw new ApiError(data.error);\n    }\n    return {\n      data,\n      success: true\n    };\n  } catch (error) {\n    console.error('API call failed:', error);\n    if (error instanceof ApiError) {\n      return {\n        error: error.message,\n        success: false\n      };\n    }\n\n    // Network error or other issues\n    return {\n      error: 'Network error. Please check your connection and try again.',\n      success: false\n    };\n  }\n}\nconst BASE_URL = 'http://localhost:5000';\n\n// Specific API functions\nexport const api = {\n  // Inventory API calls\n  async getInventory(filters) {\n    const params = new URLSearchParams();\n    if (filters !== null && filters !== void 0 && filters.sku_id) params.append('sku_id', filters.sku_id);\n    if (filters !== null && filters !== void 0 && filters.status) params.append('status', filters.status);\n    if (filters !== null && filters !== void 0 && filters.condition) params.append('condition', filters.condition);\n    const url = `${BASE_URL}/api/inventory${params.toString() ? `?${params.toString()}` : ''}`;\n    return apiCall(url);\n  },\n  async createInventoryItem(data) {\n    return apiCall(`${BASE_URL}/api/inventory`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  },\n  async getInventoryItem(id) {\n    return apiCall(`${BASE_URL}/api/inventory/${id}`);\n  },\n  async updateInventoryItem(id, data) {\n    return apiCall(`${BASE_URL}/api/inventory/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    });\n  },\n  // SKU API calls\n  async getSKUs(category) {\n    const url = category ? `${BASE_URL}/api/skus?category=${category}` : `${BASE_URL}/api/skus`;\n    return apiCall(url);\n  },\n  async createSKU(data) {\n    return apiCall(`${BASE_URL}/api/skus`, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  },\n  async getSKU(id) {\n    return apiCall(`${BASE_URL}/api/skus/${id}`);\n  },\n  // Categories API call\n  async getCategories() {\n    return apiCall(`${BASE_URL}/api/categories`);\n  },\n  // Audio processing API call\n  async processAudio(audioBlob) {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.webm');\n    return apiCall(`${BASE_URL}/api/process-audio`, {\n      method: 'POST',\n      headers: {},\n      // Don't set Content-Type for FormData\n      body: formData\n    });\n  },\n  // Health check\n  async healthCheck() {\n    return apiCall('/api/health');\n  }\n};\n\n// Offline support utilities\nexport const offlineStorage = {\n  // Save data to localStorage for offline access\n  saveToLocal(key, data) {\n    try {\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (error) {\n      console.warn('Failed to save to localStorage:', error);\n    }\n  },\n  // Load data from localStorage\n  loadFromLocal(key) {\n    try {\n      const data = localStorage.getItem(key);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.warn('Failed to load from localStorage:', error);\n      return null;\n    }\n  },\n  // Clear offline data\n  clearLocal(key) {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.warn('Failed to clear from localStorage:', error);\n    }\n  }\n};\n\n// Network status utilities\nexport const networkUtils = {\n  // Check if online\n  isOnline() {\n    return navigator.onLine;\n  },\n  // Add network status listeners\n  onNetworkChange(callback) {\n    const handleOnline = () => callback(true);\n    const handleOffline = () => callback(false);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Return cleanup function\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }\n};","map":{"version":3,"names":["ApiError","Error","constructor","message","status","name","apiCall","url","options","response","fetch","headers","ok","statusText","data","json","error","success","console","BASE_URL","api","getInventory","filters","params","URLSearchParams","sku_id","append","condition","toString","createInventoryItem","method","body","JSON","stringify","getInventoryItem","id","updateInventoryItem","getSKUs","category","createSKU","getSKU","getCategories","processAudio","audioBlob","formData","FormData","healthCheck","offlineStorage","saveToLocal","key","localStorage","setItem","warn","loadFromLocal","getItem","parse","clearLocal","removeItem","networkUtils","isOnline","navigator","onLine","onNetworkChange","callback","handleOnline","handleOffline","window","addEventListener","removeEventListener"],"sources":["/Users/admin/Desktop/Dev/camorent-inventory/src/utils/api.ts"],"sourcesContent":["// API utility functions with error handling and fallbacks\n\ninterface ApiResponse<T> {\n  data?: T;\n  error?: string;\n  success: boolean;\n}\n\nclass ApiError extends Error {\n  constructor(message: string, public status?: number) {\n    super(message);\n    this.name = 'ApiError';\n  }\n}\n\n// Generic API call function with error handling\nasync function apiCall<T>(url: string, options?: RequestInit): Promise<ApiResponse<T>> {\n  try {\n    const response = await fetch(url, {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options?.headers,\n      },\n      ...options,\n    });\n\n    if (!response.ok) {\n      throw new ApiError(`HTTP ${response.status}: ${response.statusText}`, response.status);\n    }\n\n    const data = await response.json();\n    \n    if (data.error) {\n      throw new ApiError(data.error);\n    }\n\n    return { data, success: true };\n  } catch (error) {\n    console.error('API call failed:', error);\n    \n    if (error instanceof ApiError) {\n      return { error: error.message, success: false };\n    }\n    \n    // Network error or other issues\n    return { \n      error: 'Network error. Please check your connection and try again.', \n      success: false \n    };\n  }\n}\n\nconst BASE_URL = 'http://localhost:5000';\n\n// Specific API functions\nexport const api = {\n  // Inventory API calls\n  async getInventory(filters?: { sku_id?: string; status?: string; condition?: string }) {\n    const params = new URLSearchParams();\n    if (filters?.sku_id) params.append('sku_id', filters.sku_id);\n    if (filters?.status) params.append('status', filters.status);\n    if (filters?.condition) params.append('condition', filters.condition);\n    \n    const url = `${BASE_URL}/api/inventory${params.toString() ? `?${params.toString()}` : ''}`;\n    return apiCall<{ items: any[] }>(url);\n  },\n\n  async createInventoryItem(data: any) {\n    return apiCall<{ id: string; message: string }>(`${BASE_URL}/api/inventory`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  },\n\n  async getInventoryItem(id: string) {\n    return apiCall<{ item: any }>(`${BASE_URL}/api/inventory/${id}`);\n  },\n\n  async updateInventoryItem(id: string, data: any) {\n    return apiCall<{ message: string }>(`${BASE_URL}/api/inventory/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  },\n\n  // SKU API calls\n  async getSKUs(category?: string) {\n    const url = category ? `${BASE_URL}/api/skus?category=${category}` : `${BASE_URL}/api/skus`;\n    return apiCall<{ skus: any[] }>(url);\n  },\n\n  async createSKU(data: any) {\n    return apiCall<{ id: string; message: string }>(`${BASE_URL}/api/skus`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  },\n\n  async getSKU(id: string) {\n    return apiCall<{ sku: any }>(`${BASE_URL}/api/skus/${id}`);\n  },\n\n  // Categories API call\n  async getCategories() {\n    return apiCall<{ categories: string[] }>(`${BASE_URL}/api/categories`);\n  },\n\n  // Audio processing API call\n  async processAudio(audioBlob: Blob) {\n    const formData = new FormData();\n    formData.append('audio', audioBlob, 'recording.webm');\n\n    return apiCall<any>(`${BASE_URL}/api/process-audio`, {\n      method: 'POST',\n      headers: {}, // Don't set Content-Type for FormData\n      body: formData,\n    });\n  },\n\n  // Health check\n  async healthCheck() {\n    return apiCall<{ status: string; message: string }>('/api/health');\n  }\n};\n\n// Offline support utilities\nexport const offlineStorage = {\n  // Save data to localStorage for offline access\n  saveToLocal(key: string, data: any) {\n    try {\n      localStorage.setItem(key, JSON.stringify(data));\n    } catch (error) {\n      console.warn('Failed to save to localStorage:', error);\n    }\n  },\n\n  // Load data from localStorage\n  loadFromLocal<T>(key: string): T | null {\n    try {\n      const data = localStorage.getItem(key);\n      return data ? JSON.parse(data) : null;\n    } catch (error) {\n      console.warn('Failed to load from localStorage:', error);\n      return null;\n    }\n  },\n\n  // Clear offline data\n  clearLocal(key: string) {\n    try {\n      localStorage.removeItem(key);\n    } catch (error) {\n      console.warn('Failed to clear from localStorage:', error);\n    }\n  }\n};\n\n// Network status utilities\nexport const networkUtils = {\n  // Check if online\n  isOnline(): boolean {\n    return navigator.onLine;\n  },\n\n  // Add network status listeners\n  onNetworkChange(callback: (isOnline: boolean) => void) {\n    const handleOnline = () => callback(true);\n    const handleOffline = () => callback(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // Return cleanup function\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}