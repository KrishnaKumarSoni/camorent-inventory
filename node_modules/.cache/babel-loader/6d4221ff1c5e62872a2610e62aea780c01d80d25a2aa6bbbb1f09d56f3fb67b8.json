{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const login=async(email,password)=>{// Simulate authentication delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Simple validation - accept any email/password for demo\nif(email&&password){const userWithUid={id:'demo-user',email:email,name:email.split('@')[0],uid:'demo-user'};setUser(userWithUid);localStorage.setItem('user',JSON.stringify(userWithUid));}else{throw new Error('Please enter valid credentials');}};const register=async(email,password)=>{// Simulate authentication delay\nawait new Promise(resolve=>setTimeout(resolve,1000));// Simple validation - accept any email/password for demo\nif(email&&password){const userWithUid={id:'demo-user',email:email,name:email.split('@')[0],uid:'demo-user'};setUser(userWithUid);localStorage.setItem('user',JSON.stringify(userWithUid));}else{throw new Error('Please enter valid credentials');}};const logout=async()=>{setUser(null);localStorage.removeItem('user');};// Check for existing user session on app load\nuseEffect(()=>{const storedUser=localStorage.getItem('user');if(storedUser){try{const parsedUser=JSON.parse(storedUser);setUser(parsedUser);}catch(error){console.error('Error parsing stored user:',error);localStorage.removeItem('user');}}setLoading(false);},[]);const value={user,loading,login,register,logout};console.log('AuthProvider render - loading:',loading,'user:',user);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","login","email","password","Promise","resolve","setTimeout","userWithUid","id","name","split","uid","localStorage","setItem","JSON","stringify","register","logout","removeItem","storedUser","getItem","parsedUser","parse","error","console","value","log","Provider"],"sources":["/Users/admin/Desktop/Dev/camorent-inventory/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface SimpleUser {\n  id: string;\n  email: string;\n  name: string;\n  uid?: string; // For backwards compatibility\n}\n\ninterface AuthContextType {\n  user: SimpleUser | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [user, setUser] = useState<SimpleUser | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const login = async (email: string, password: string) => {\n    // Simulate authentication delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Simple validation - accept any email/password for demo\n    if (email && password) {\n      const userWithUid = { \n        id: 'demo-user', \n        email: email, \n        name: email.split('@')[0], \n        uid: 'demo-user' \n      };\n      setUser(userWithUid);\n      localStorage.setItem('user', JSON.stringify(userWithUid));\n    } else {\n      throw new Error('Please enter valid credentials');\n    }\n  };\n\n  const register = async (email: string, password: string) => {\n    // Simulate authentication delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    // Simple validation - accept any email/password for demo\n    if (email && password) {\n      const userWithUid = { \n        id: 'demo-user', \n        email: email, \n        name: email.split('@')[0], \n        uid: 'demo-user' \n      };\n      setUser(userWithUid);\n      localStorage.setItem('user', JSON.stringify(userWithUid));\n    } else {\n      throw new Error('Please enter valid credentials');\n    }\n  };\n\n  const logout = async () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  // Check for existing user session on app load\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setUser(parsedUser);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        localStorage.removeItem('user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  \n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n\n  console.log('AuthProvider render - loading:', loading, 'user:', user);\n  \n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}