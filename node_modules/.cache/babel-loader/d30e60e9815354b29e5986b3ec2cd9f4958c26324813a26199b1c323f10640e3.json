{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;// Set mock user immediately to prevent login flash\nconst[user,setUser]=useState({id:'dev-user',email:'dev@example.com',name:'Dev User',uid:'dev-user'});const[loading,setLoading]=useState(false);const login=async(email,password)=>{const response=await fetch('http://localhost:5000/api/auth/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();if(response.ok&&data.success){const userWithUid={...data.user,uid:data.user.id};setUser(userWithUid);localStorage.setItem('user',JSON.stringify(userWithUid));}else{throw new Error(data.error||'Login failed');}};const register=async(email,password)=>{const response=await fetch('http://localhost:5000/api/auth/register',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password})});const data=await response.json();if(response.ok&&data.success){const userWithUid={...data.user,uid:data.user.id};setUser(userWithUid);localStorage.setItem('user',JSON.stringify(userWithUid));}else{throw new Error(data.error||'Registration failed');}};const logout=async()=>{setUser(null);localStorage.removeItem('user');};// Remove the useEffect that was causing the loading state\nconst value={user,loading,login,register,logout};console.log('AuthProvider render - loading:',loading,'user:',user);return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","id","email","name","uid","loading","setLoading","login","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","success","userWithUid","localStorage","setItem","error","register","logout","removeItem","value","console","log","Provider"],"sources":["/Users/admin/Desktop/Dev/camorent-inventory/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface SimpleUser {\n  id: string;\n  email: string;\n  name: string;\n  uid?: string; // For backwards compatibility\n}\n\ninterface AuthContextType {\n  user: SimpleUser | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (email: string, password: string) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  // Set mock user immediately to prevent login flash\n  const [user, setUser] = useState<SimpleUser | null>({\n    id: 'dev-user',\n    email: 'dev@example.com',\n    name: 'Dev User',\n    uid: 'dev-user'\n  });\n  const [loading, setLoading] = useState(false);\n\n  const login = async (email: string, password: string) => {\n    const response = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password })\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok && data.success) {\n      const userWithUid = { ...data.user, uid: data.user.id };\n      setUser(userWithUid);\n      localStorage.setItem('user', JSON.stringify(userWithUid));\n    } else {\n      throw new Error(data.error || 'Login failed');\n    }\n  };\n\n  const register = async (email: string, password: string) => {\n    const response = await fetch('http://localhost:5000/api/auth/register', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password })\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok && data.success) {\n      const userWithUid = { ...data.user, uid: data.user.id };\n      setUser(userWithUid);\n      localStorage.setItem('user', JSON.stringify(userWithUid));\n    } else {\n      throw new Error(data.error || 'Registration failed');\n    }\n  };\n\n  const logout = async () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  // Remove the useEffect that was causing the loading state\n  \n  const value: AuthContextType = {\n    user,\n    loading,\n    login,\n    register,\n    logout\n  };\n\n  console.log('AuthProvider render - loading:', loading, 'user:', user);\n  \n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}